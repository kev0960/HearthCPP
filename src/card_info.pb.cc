// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: card_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "card_info.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    CardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardInfo_CardNameEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CardInfo_CardTextInhandEntry_descriptor_ =
    NULL;
const ::google::protobuf::Descriptor* CardInfo_FlavorTextEntry_descriptor_ =
    NULL;

}  // namespace

void protobuf_AssignDesc_card_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_card_5finfo_2eproto() {
  protobuf_AddDesc_card_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "card_info.proto");
  GOOGLE_CHECK(file != NULL);
  CardInfo_descriptor_ = file->message_type(0);
  static const int CardInfo_offsets_[45] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, card_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, card_name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo,
                                                     card_text_inhand_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, flavor_text_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, health_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, attack_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, cost_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, card_set_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, class_name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, card_type_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, rarity_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, collectible_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo,
                                                     hero_power_damage_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, card_race_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, durability_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, charge_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, inspire_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, battlecry_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, deathrattle_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, divine_shield_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, stealth_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, choose_one_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, discover_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, aura_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, elite_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, taunt_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, poison_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, adapt_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo,
                                                     cant_targeted_by_spell_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
          CardInfo, cant_targeted_by_hero_power_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo,
                                                     affected_by_spell_power_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, freeze_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, silence_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, windfury_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, combo_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, secret_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, overload_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, overload_owed_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, immune_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, cant_attack_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, enraged_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, quest_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, spellpower_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo,
                                                     double_spell_dmg_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, armor_),
  };
  CardInfo_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          CardInfo_descriptor_, CardInfo::internal_default_instance(),
          CardInfo_offsets_, -1, -1, -1, sizeof(CardInfo),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo,
                                                         _internal_metadata_));
  CardInfo_CardNameEntry_descriptor_ = CardInfo_descriptor_->nested_type(0);
  CardInfo_CardTextInhandEntry_descriptor_ =
      CardInfo_descriptor_->nested_type(1);
  CardInfo_FlavorTextEntry_descriptor_ = CardInfo_descriptor_->nested_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                     &protobuf_AssignDesc_card_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CardInfo_descriptor_, CardInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CardInfo_CardNameEntry_descriptor_,
      ::google::protobuf::internal::MapEntry<
          ::std::string, ::std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          0>::CreateDefaultInstance(CardInfo_CardNameEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CardInfo_CardTextInhandEntry_descriptor_,
      ::google::protobuf::internal::MapEntry<
          ::std::string, ::std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          0>::CreateDefaultInstance(CardInfo_CardTextInhandEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CardInfo_FlavorTextEntry_descriptor_,
      ::google::protobuf::internal::MapEntry<
          ::std::string, ::std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          0>::CreateDefaultInstance(CardInfo_FlavorTextEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_card_5finfo_2eproto() {
  CardInfo_default_instance_.Shutdown();
  delete CardInfo_reflection_;
}

void protobuf_InitDefaults_card_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  CardInfo_default_instance_.DefaultConstruct();
  CardInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_card_5finfo_2eproto_once_);
void protobuf_InitDefaults_card_5finfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(
      &protobuf_InitDefaults_card_5finfo_2eproto_once_,
      &protobuf_InitDefaults_card_5finfo_2eproto_impl);
}
void protobuf_AddDesc_card_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_card_5finfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\017card_info.proto\"\336\010\n\010CardInfo\022\017\n\007card_i"
      "d\030\001 \001(\t\022*\n\tcard_name\030\002 \003(\0132\027.CardInfo.Ca"
      "rdNameEntry\0227\n\020card_text_inhand\030\003 \003(\0132\035."
      "CardInfo.CardTextInhandEntry\022.\n\013flavor_t"
      "ext\030\004 \003(\0132\031.CardInfo.FlavorTextEntry\022\016\n\006"
      "health\030\005 \001(\005\022\016\n\006attack\030\006 "
      "\001(\005\022\014\n\004cost\030\007 \001"
      "(\005\022\020\n\010card_set\030\010 "
      "\001(\005\022\022\n\nclass_name\030\t \001(\005"
      "\022\021\n\tcard_type\030\n \001(\005\022\016\n\006rarity\030\013 "
      "\001(\005\022\023\n\013c"
      "ollectible\030\014 \001(\005\022\031\n\021hero_power_damage\030\r "
      "\001(\005\022\021\n\tcard_race\030\016 "
      "\001(\005\022\022\n\ndurability\030\032 \001"
      "(\005\022\016\n\006charge\030\017 "
      "\001(\010\022\017\n\007inspire\030\020 \001(\010\022\021\n\tb"
      "attlecry\030\021 \001(\010\022\023\n\013deathrattle\030\022 "
      "\001(\010\022\025\n\rd"
      "ivine_shield\030\023 \001(\010\022\017\n\007stealth\030\024 "
      "\001(\010\022\022\n\nc"
      "hoose_one\030\025 \001(\010\022\020\n\010discover\030\026 "
      "\001(\010\022\014\n\004aur"
      "a\030\027 \001(\010\022\r\n\005elite\030\030 "
      "\001(\010\022\r\n\005taunt\030\031 \001(\010\022\016\n"
      "\006poison\030\033 \001(\010\022\r\n\005adapt\030\034 "
      "\001(\010\022\036\n\026cant_tar"
      "geted_by_spell\030\035 \001(\010\022#\n\033cant_targeted_by"
      "_hero_power\030\036 \001(\010\022\037\n\027affected_by_spell_p"
      "ower\030\037 \001(\010\022\016\n\006freeze\030  "
      "\001(\010\022\017\n\007silence\030! "
      "\001(\010\022\020\n\010windfury\030\" \001(\010\022\r\n\005combo\030# "
      "\001(\010\022\016\n\006"
      "secret\030$ \001(\010\022\020\n\010overload\030% "
      "\001(\010\022\025\n\roverlo"
      "ad_owed\030& \001(\010\022\016\n\006immune\030\' "
      "\001(\010\022\023\n\013cant_at"
      "tack\030( \001(\010\022\017\n\007enraged\030) "
      "\001(\010\022\r\n\005quest\030* \001"
      "(\010\022\022\n\nspellpower\030+ \001(\010\022\030\n\020double_spell_d"
      "mg\030, \001(\010\022\r\n\005armor\030- \001(\010\032/\n\rCardNameEntry"
      "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
      "\001(\t:\0028\001\0325\n\023Card"
      "TextInhandEntry\022\013\n\003key\030\001 "
      "\001(\t\022\r\n\005value\030\002 "
      "\001(\t:\0028\001\0321\n\017FlavorTextEntry\022\013\n\003key\030\001 "
      "\001(\t\022"
      "\r\n\005value\030\002 \001(\t:\0028\001b\006proto3",
      1146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "card_info.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_card_5finfo_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_card_5finfo_2eproto_once_);
void protobuf_AddDesc_card_5finfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(
      &protobuf_AddDesc_card_5finfo_2eproto_once_,
      &protobuf_AddDesc_card_5finfo_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_card_5finfo_2eproto {
  StaticDescriptorInitializer_card_5finfo_2eproto() {
    protobuf_AddDesc_card_5finfo_2eproto();
  }
} static_descriptor_initializer_card_5finfo_2eproto_;

namespace {

static void MergeFromFail(int line)
    GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardInfo::kCardIdFieldNumber;
const int CardInfo::kCardNameFieldNumber;
const int CardInfo::kCardTextInhandFieldNumber;
const int CardInfo::kFlavorTextFieldNumber;
const int CardInfo::kHealthFieldNumber;
const int CardInfo::kAttackFieldNumber;
const int CardInfo::kCostFieldNumber;
const int CardInfo::kCardSetFieldNumber;
const int CardInfo::kClassNameFieldNumber;
const int CardInfo::kCardTypeFieldNumber;
const int CardInfo::kRarityFieldNumber;
const int CardInfo::kCollectibleFieldNumber;
const int CardInfo::kHeroPowerDamageFieldNumber;
const int CardInfo::kCardRaceFieldNumber;
const int CardInfo::kDurabilityFieldNumber;
const int CardInfo::kChargeFieldNumber;
const int CardInfo::kInspireFieldNumber;
const int CardInfo::kBattlecryFieldNumber;
const int CardInfo::kDeathrattleFieldNumber;
const int CardInfo::kDivineShieldFieldNumber;
const int CardInfo::kStealthFieldNumber;
const int CardInfo::kChooseOneFieldNumber;
const int CardInfo::kDiscoverFieldNumber;
const int CardInfo::kAuraFieldNumber;
const int CardInfo::kEliteFieldNumber;
const int CardInfo::kTauntFieldNumber;
const int CardInfo::kPoisonFieldNumber;
const int CardInfo::kAdaptFieldNumber;
const int CardInfo::kCantTargetedBySpellFieldNumber;
const int CardInfo::kCantTargetedByHeroPowerFieldNumber;
const int CardInfo::kAffectedBySpellPowerFieldNumber;
const int CardInfo::kFreezeFieldNumber;
const int CardInfo::kSilenceFieldNumber;
const int CardInfo::kWindfuryFieldNumber;
const int CardInfo::kComboFieldNumber;
const int CardInfo::kSecretFieldNumber;
const int CardInfo::kOverloadFieldNumber;
const int CardInfo::kOverloadOwedFieldNumber;
const int CardInfo::kImmuneFieldNumber;
const int CardInfo::kCantAttackFieldNumber;
const int CardInfo::kEnragedFieldNumber;
const int CardInfo::kQuestFieldNumber;
const int CardInfo::kSpellpowerFieldNumber;
const int CardInfo::kDoubleSpellDmgFieldNumber;
const int CardInfo::kArmorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardInfo::CardInfo()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance())
    protobuf_InitDefaults_card_5finfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CardInfo)
}

void CardInfo::InitAsDefaultInstance() {}

CardInfo::CardInfo(const CardInfo& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CardInfo)
}

void CardInfo::SharedCtor() {
  card_name_.SetAssignDescriptorCallback(protobuf_AssignDescriptorsOnce);
  card_name_.SetEntryDescriptor(&::CardInfo_CardNameEntry_descriptor_);
  card_text_inhand_.SetAssignDescriptorCallback(protobuf_AssignDescriptorsOnce);
  card_text_inhand_.SetEntryDescriptor(
      &::CardInfo_CardTextInhandEntry_descriptor_);
  flavor_text_.SetAssignDescriptorCallback(protobuf_AssignDescriptorsOnce);
  flavor_text_.SetEntryDescriptor(&::CardInfo_FlavorTextEntry_descriptor_);
  card_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&health_, 0, reinterpret_cast<char*>(&armor_) -
                            reinterpret_cast<char*>(&health_) + sizeof(armor_));
  _cached_size_ = 0;
}

CardInfo::~CardInfo() {
  // @@protoc_insertion_point(destructor:CardInfo)
  SharedDtor();
}

void CardInfo::SharedDtor() {
  card_id_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardInfo_descriptor_;
}

const CardInfo& CardInfo::default_instance() {
  protobuf_InitDefaults_card_5finfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CardInfo>
    CardInfo_default_instance_;

CardInfo* CardInfo::New(::google::protobuf::Arena* arena) const {
  CardInfo* n = new CardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CardInfo)
#if defined(__clang__)
#define ZR_HELPER_(f)                                           \
  _Pragma("clang diagnostic push") _Pragma(                     \
      "clang diagnostic ignored "                               \
      "\"-Winvalid-offsetof\"") __builtin_offsetof(CardInfo, f) \
      _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) \
  reinterpret_cast<char*>(&reinterpret_cast<CardInfo*>(16)->f)
#endif

#define ZR_(first, last)                                           \
  do {                                                             \
    ::memset(&(first), 0,                                          \
             ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
  } while (0)

  ZR_(health_, card_set_);
  card_id_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(class_name_, charge_);
  ZR_(inspire_, aura_);
  ZR_(elite_, freeze_);
  ZR_(silence_, cant_attack_);
  ZR_(enraged_, armor_);

#undef ZR_HELPER_
#undef ZR_

  card_name_.Clear();
  card_text_inhand_.Clear();
  flavor_text_.Clear();
}

bool CardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string card_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_card_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->card_id().data(), this->card_id().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "CardInfo.card_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_card_name;
        break;
      }

      // map<string, string> card_name = 2;
      case 2: {
        if (tag == 18) {
        parse_card_name:
          DO_(input->IncrementRecursionDepth());
        parse_loop_card_name:
          CardInfo_CardNameEntry::Parser<
              ::google::protobuf::internal::MapField<
                  ::std::string, ::std::string,
                  ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                  ::google::protobuf::internal::WireFormatLite::TYPE_STRING, 0>,
              ::google::protobuf::Map< ::std::string, ::std::string> >
              parser(&card_name_);
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              parser.key().data(), parser.key().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "CardInfo.CardNameEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              parser.value().data(), parser.value().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "CardInfo.CardNameEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_card_name;
        if (input->ExpectTag(26)) goto parse_loop_card_text_inhand;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> card_text_inhand = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
        parse_loop_card_text_inhand:
          CardInfo_CardTextInhandEntry::Parser<
              ::google::protobuf::internal::MapField<
                  ::std::string, ::std::string,
                  ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                  ::google::protobuf::internal::WireFormatLite::TYPE_STRING, 0>,
              ::google::protobuf::Map< ::std::string, ::std::string> >
              parser(&card_text_inhand_);
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              parser.key().data(), parser.key().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "CardInfo.CardTextInhandEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              parser.value().data(), parser.value().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "CardInfo.CardTextInhandEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_card_text_inhand;
        if (input->ExpectTag(34)) goto parse_loop_flavor_text;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> flavor_text = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
        parse_loop_flavor_text:
          CardInfo_FlavorTextEntry::Parser<
              ::google::protobuf::internal::MapField<
                  ::std::string, ::std::string,
                  ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                  ::google::protobuf::internal::WireFormatLite::TYPE_STRING, 0>,
              ::google::protobuf::Map< ::std::string, ::std::string> >
              parser(&flavor_text_);
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              parser.key().data(), parser.key().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "CardInfo.FlavorTextEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              parser.value().data(), parser.value().length(),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "CardInfo.FlavorTextEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_flavor_text;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_health;
        break;
      }

      // optional int32 health = 5;
      case 5: {
        if (tag == 40) {
        parse_health:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &health_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_attack;
        break;
      }

      // optional int32 attack = 6;
      case 6: {
        if (tag == 48) {
        parse_attack:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &attack_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cost;
        break;
      }

      // optional int32 cost = 7;
      case 7: {
        if (tag == 56) {
        parse_cost:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &cost_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_card_set;
        break;
      }

      // optional int32 card_set = 8;
      case 8: {
        if (tag == 64) {
        parse_card_set:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &card_set_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_class_name;
        break;
      }

      // optional int32 class_name = 9;
      case 9: {
        if (tag == 72) {
        parse_class_name:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &class_name_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_card_type;
        break;
      }

      // optional int32 card_type = 10;
      case 10: {
        if (tag == 80) {
        parse_card_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &card_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_rarity;
        break;
      }

      // optional int32 rarity = 11;
      case 11: {
        if (tag == 88) {
        parse_rarity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &rarity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_collectible;
        break;
      }

      // optional int32 collectible = 12;
      case 12: {
        if (tag == 96) {
        parse_collectible:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &collectible_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_hero_power_damage;
        break;
      }

      // optional int32 hero_power_damage = 13;
      case 13: {
        if (tag == 104) {
        parse_hero_power_damage:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &hero_power_damage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_card_race;
        break;
      }

      // optional int32 card_race = 14;
      case 14: {
        if (tag == 112) {
        parse_card_race:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &card_race_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_charge;
        break;
      }

      // optional bool charge = 15;
      case 15: {
        if (tag == 120) {
        parse_charge:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &charge_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_inspire;
        break;
      }

      // optional bool inspire = 16;
      case 16: {
        if (tag == 128) {
        parse_inspire:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &inspire_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_battlecry;
        break;
      }

      // optional bool battlecry = 17;
      case 17: {
        if (tag == 136) {
        parse_battlecry:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &battlecry_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_deathrattle;
        break;
      }

      // optional bool deathrattle = 18;
      case 18: {
        if (tag == 144) {
        parse_deathrattle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &deathrattle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_divine_shield;
        break;
      }

      // optional bool divine_shield = 19;
      case 19: {
        if (tag == 152) {
        parse_divine_shield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &divine_shield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_stealth;
        break;
      }

      // optional bool stealth = 20;
      case 20: {
        if (tag == 160) {
        parse_stealth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &stealth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_choose_one;
        break;
      }

      // optional bool choose_one = 21;
      case 21: {
        if (tag == 168) {
        parse_choose_one:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &choose_one_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_discover;
        break;
      }

      // optional bool discover = 22;
      case 22: {
        if (tag == 176) {
        parse_discover:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &discover_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_aura;
        break;
      }

      // optional bool aura = 23;
      case 23: {
        if (tag == 184) {
        parse_aura:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &aura_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_elite;
        break;
      }

      // optional bool elite = 24;
      case 24: {
        if (tag == 192) {
        parse_elite:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &elite_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_taunt;
        break;
      }

      // optional bool taunt = 25;
      case 25: {
        if (tag == 200) {
        parse_taunt:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &taunt_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_durability;
        break;
      }

      // optional int32 durability = 26;
      case 26: {
        if (tag == 208) {
        parse_durability:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &durability_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_poison;
        break;
      }

      // optional bool poison = 27;
      case 27: {
        if (tag == 216) {
        parse_poison:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &poison_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_adapt;
        break;
      }

      // optional bool adapt = 28;
      case 28: {
        if (tag == 224) {
        parse_adapt:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &adapt_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_cant_targeted_by_spell;
        break;
      }

      // optional bool cant_targeted_by_spell = 29;
      case 29: {
        if (tag == 232) {
        parse_cant_targeted_by_spell:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &cant_targeted_by_spell_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_cant_targeted_by_hero_power;
        break;
      }

      // optional bool cant_targeted_by_hero_power = 30;
      case 30: {
        if (tag == 240) {
        parse_cant_targeted_by_hero_power:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &cant_targeted_by_hero_power_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_affected_by_spell_power;
        break;
      }

      // optional bool affected_by_spell_power = 31;
      case 31: {
        if (tag == 248) {
        parse_affected_by_spell_power:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &affected_by_spell_power_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_freeze;
        break;
      }

      // optional bool freeze = 32;
      case 32: {
        if (tag == 256) {
        parse_freeze:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &freeze_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_silence;
        break;
      }

      // optional bool silence = 33;
      case 33: {
        if (tag == 264) {
        parse_silence:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &silence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_windfury;
        break;
      }

      // optional bool windfury = 34;
      case 34: {
        if (tag == 272) {
        parse_windfury:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &windfury_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_combo;
        break;
      }

      // optional bool combo = 35;
      case 35: {
        if (tag == 280) {
        parse_combo:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &combo_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_secret;
        break;
      }

      // optional bool secret = 36;
      case 36: {
        if (tag == 288) {
        parse_secret:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &secret_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_overload;
        break;
      }

      // optional bool overload = 37;
      case 37: {
        if (tag == 296) {
        parse_overload:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &overload_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_overload_owed;
        break;
      }

      // optional bool overload_owed = 38;
      case 38: {
        if (tag == 304) {
        parse_overload_owed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &overload_owed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_immune;
        break;
      }

      // optional bool immune = 39;
      case 39: {
        if (tag == 312) {
        parse_immune:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &immune_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_cant_attack;
        break;
      }

      // optional bool cant_attack = 40;
      case 40: {
        if (tag == 320) {
        parse_cant_attack:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &cant_attack_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_enraged;
        break;
      }

      // optional bool enraged = 41;
      case 41: {
        if (tag == 328) {
        parse_enraged:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &enraged_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_quest;
        break;
      }

      // optional bool quest = 42;
      case 42: {
        if (tag == 336) {
        parse_quest:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &quest_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_spellpower;
        break;
      }

      // optional bool spellpower = 43;
      case 43: {
        if (tag == 344) {
        parse_spellpower:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &spellpower_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_double_spell_dmg;
        break;
      }

      // optional bool double_spell_dmg = 44;
      case 44: {
        if (tag == 352) {
        parse_double_spell_dmg:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &double_spell_dmg_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_armor;
        break;
      }

      // optional bool armor = 45;
      case 45: {
        if (tag == 360) {
        parse_armor:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &armor_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input,
                                                                    tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CardInfo)
  return false;
#undef DO_
}

void CardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CardInfo)
  // optional string card_id = 1;
  if (this->card_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->card_id().data(), this->card_id().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "CardInfo.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->card_id(), output);
  }

  // map<string, string> card_name = 2;
  if (!this->card_name().empty()) {
    typedef ::google::protobuf::Map< ::std::string,
                                     ::std::string>::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->first.data(), p->first.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.CardNameEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->second.data(), p->second.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.CardNameEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() && this->card_name().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_name().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string>::size_type
          size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator
               it = this->card_name().begin();
           it != this->card_name().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CardInfo_CardNameEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(
            card_name_.NewEntryWrapper(items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CardInfo_CardNameEntry> entry;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator it =
               this->card_name().begin();
           it != this->card_name().end(); ++it) {
        entry.reset(card_name_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> card_text_inhand = 3;
  if (!this->card_text_inhand().empty()) {
    typedef ::google::protobuf::Map< ::std::string,
                                     ::std::string>::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->first.data(), p->first.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.CardTextInhandEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->second.data(), p->second.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.CardTextInhandEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->card_text_inhand().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_text_inhand().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string>::size_type
          size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator
               it = this->card_text_inhand().begin();
           it != this->card_text_inhand().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CardInfo_CardTextInhandEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(card_text_inhand_.NewEntryWrapper(items[i]->first,
                                                      items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CardInfo_CardTextInhandEntry> entry;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator it =
               this->card_text_inhand().begin();
           it != this->card_text_inhand().end(); ++it) {
        entry.reset(card_text_inhand_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> flavor_text = 4;
  if (!this->flavor_text().empty()) {
    typedef ::google::protobuf::Map< ::std::string,
                                     ::std::string>::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->first.data(), p->first.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.FlavorTextEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->second.data(), p->second.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.FlavorTextEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->flavor_text().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->flavor_text().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string>::size_type
          size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator
               it = this->flavor_text().begin();
           it != this->flavor_text().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CardInfo_FlavorTextEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(
            flavor_text_.NewEntryWrapper(items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CardInfo_FlavorTextEntry> entry;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator it =
               this->flavor_text().begin();
           it != this->flavor_text().end(); ++it) {
        entry.reset(flavor_text_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int32 health = 5;
  if (this->health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->health(),
                                                             output);
  }

  // optional int32 attack = 6;
  if (this->attack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attack(),
                                                             output);
  }

  // optional int32 cost = 7;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cost(),
                                                             output);
  }

  // optional int32 card_set = 8;
  if (this->card_set() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        8, this->card_set(), output);
  }

  // optional int32 class_name = 9;
  if (this->class_name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        9, this->class_name(), output);
  }

  // optional int32 card_type = 10;
  if (this->card_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        10, this->card_type(), output);
  }

  // optional int32 rarity = 11;
  if (this->rarity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rarity(),
                                                             output);
  }

  // optional int32 collectible = 12;
  if (this->collectible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        12, this->collectible(), output);
  }

  // optional int32 hero_power_damage = 13;
  if (this->hero_power_damage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        13, this->hero_power_damage(), output);
  }

  // optional int32 card_race = 14;
  if (this->card_race() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        14, this->card_race(), output);
  }

  // optional bool charge = 15;
  if (this->charge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->charge(),
                                                            output);
  }

  // optional bool inspire = 16;
  if (this->inspire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->inspire(),
                                                            output);
  }

  // optional bool battlecry = 17;
  if (this->battlecry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        17, this->battlecry(), output);
  }

  // optional bool deathrattle = 18;
  if (this->deathrattle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        18, this->deathrattle(), output);
  }

  // optional bool divine_shield = 19;
  if (this->divine_shield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        19, this->divine_shield(), output);
  }

  // optional bool stealth = 20;
  if (this->stealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->stealth(),
                                                            output);
  }

  // optional bool choose_one = 21;
  if (this->choose_one() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        21, this->choose_one(), output);
  }

  // optional bool discover = 22;
  if (this->discover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        22, this->discover(), output);
  }

  // optional bool aura = 23;
  if (this->aura() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->aura(),
                                                            output);
  }

  // optional bool elite = 24;
  if (this->elite() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->elite(),
                                                            output);
  }

  // optional bool taunt = 25;
  if (this->taunt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->taunt(),
                                                            output);
  }

  // optional int32 durability = 26;
  if (this->durability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        26, this->durability(), output);
  }

  // optional bool poison = 27;
  if (this->poison() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->poison(),
                                                            output);
  }

  // optional bool adapt = 28;
  if (this->adapt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->adapt(),
                                                            output);
  }

  // optional bool cant_targeted_by_spell = 29;
  if (this->cant_targeted_by_spell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        29, this->cant_targeted_by_spell(), output);
  }

  // optional bool cant_targeted_by_hero_power = 30;
  if (this->cant_targeted_by_hero_power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        30, this->cant_targeted_by_hero_power(), output);
  }

  // optional bool affected_by_spell_power = 31;
  if (this->affected_by_spell_power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        31, this->affected_by_spell_power(), output);
  }

  // optional bool freeze = 32;
  if (this->freeze() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->freeze(),
                                                            output);
  }

  // optional bool silence = 33;
  if (this->silence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->silence(),
                                                            output);
  }

  // optional bool windfury = 34;
  if (this->windfury() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        34, this->windfury(), output);
  }

  // optional bool combo = 35;
  if (this->combo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->combo(),
                                                            output);
  }

  // optional bool secret = 36;
  if (this->secret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->secret(),
                                                            output);
  }

  // optional bool overload = 37;
  if (this->overload() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        37, this->overload(), output);
  }

  // optional bool overload_owed = 38;
  if (this->overload_owed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        38, this->overload_owed(), output);
  }

  // optional bool immune = 39;
  if (this->immune() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->immune(),
                                                            output);
  }

  // optional bool cant_attack = 40;
  if (this->cant_attack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        40, this->cant_attack(), output);
  }

  // optional bool enraged = 41;
  if (this->enraged() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->enraged(),
                                                            output);
  }

  // optional bool quest = 42;
  if (this->quest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->quest(),
                                                            output);
  }

  // optional bool spellpower = 43;
  if (this->spellpower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        43, this->spellpower(), output);
  }

  // optional bool double_spell_dmg = 44;
  if (this->double_spell_dmg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        44, this->double_spell_dmg(), output);
  }

  // optional bool armor = 45;
  if (this->armor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->armor(),
                                                            output);
  }

  // @@protoc_insertion_point(serialize_end:CardInfo)
}

::google::protobuf::uint8* CardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CardInfo)
  // optional string card_id = 1;
  if (this->card_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->card_id().data(), this->card_id().length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "CardInfo.card_id");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->card_id(), target);
  }

  // map<string, string> card_name = 2;
  if (!this->card_name().empty()) {
    typedef ::google::protobuf::Map< ::std::string,
                                     ::std::string>::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->first.data(), p->first.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.CardNameEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->second.data(), p->second.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.CardNameEntry.value");
      }
    };

    if (deterministic && this->card_name().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_name().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string>::size_type
          size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator
               it = this->card_name().begin();
           it != this->card_name().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CardInfo_CardNameEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(
            card_name_.NewEntryWrapper(items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageNoVirtualToArray(2, *entry, deterministic,
                                                 target);
        ;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CardInfo_CardNameEntry> entry;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator it =
               this->card_name().begin();
           it != this->card_name().end(); ++it) {
        entry.reset(card_name_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageNoVirtualToArray(2, *entry, deterministic,
                                                 target);
        ;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> card_text_inhand = 3;
  if (!this->card_text_inhand().empty()) {
    typedef ::google::protobuf::Map< ::std::string,
                                     ::std::string>::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->first.data(), p->first.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.CardTextInhandEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->second.data(), p->second.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.CardTextInhandEntry.value");
      }
    };

    if (deterministic && this->card_text_inhand().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_text_inhand().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string>::size_type
          size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator
               it = this->card_text_inhand().begin();
           it != this->card_text_inhand().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CardInfo_CardTextInhandEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(card_text_inhand_.NewEntryWrapper(items[i]->first,
                                                      items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageNoVirtualToArray(3, *entry, deterministic,
                                                 target);
        ;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CardInfo_CardTextInhandEntry> entry;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator it =
               this->card_text_inhand().begin();
           it != this->card_text_inhand().end(); ++it) {
        entry.reset(card_text_inhand_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageNoVirtualToArray(3, *entry, deterministic,
                                                 target);
        ;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> flavor_text = 4;
  if (!this->flavor_text().empty()) {
    typedef ::google::protobuf::Map< ::std::string,
                                     ::std::string>::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->first.data(), p->first.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.FlavorTextEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->second.data(), p->second.length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "CardInfo.FlavorTextEntry.value");
      }
    };

    if (deterministic && this->flavor_text().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->flavor_text().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string>::size_type
          size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator
               it = this->flavor_text().begin();
           it != this->flavor_text().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CardInfo_FlavorTextEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(
            flavor_text_.NewEntryWrapper(items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageNoVirtualToArray(4, *entry, deterministic,
                                                 target);
        ;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CardInfo_FlavorTextEntry> entry;
      for (::google::protobuf::Map< ::std::string,
                                    ::std::string>::const_iterator it =
               this->flavor_text().begin();
           it != this->flavor_text().end(); ++it) {
        entry.reset(flavor_text_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageNoVirtualToArray(4, *entry, deterministic,
                                                 target);
        ;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int32 health = 5;
  if (this->health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->health(), target);
  }

  // optional int32 attack = 6;
  if (this->attack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->attack(), target);
  }

  // optional int32 cost = 7;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        7, this->cost(), target);
  }

  // optional int32 card_set = 8;
  if (this->card_set() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        8, this->card_set(), target);
  }

  // optional int32 class_name = 9;
  if (this->class_name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        9, this->class_name(), target);
  }

  // optional int32 card_type = 10;
  if (this->card_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        10, this->card_type(), target);
  }

  // optional int32 rarity = 11;
  if (this->rarity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        11, this->rarity(), target);
  }

  // optional int32 collectible = 12;
  if (this->collectible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        12, this->collectible(), target);
  }

  // optional int32 hero_power_damage = 13;
  if (this->hero_power_damage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        13, this->hero_power_damage(), target);
  }

  // optional int32 card_race = 14;
  if (this->card_race() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        14, this->card_race(), target);
  }

  // optional bool charge = 15;
  if (this->charge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        15, this->charge(), target);
  }

  // optional bool inspire = 16;
  if (this->inspire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        16, this->inspire(), target);
  }

  // optional bool battlecry = 17;
  if (this->battlecry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        17, this->battlecry(), target);
  }

  // optional bool deathrattle = 18;
  if (this->deathrattle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        18, this->deathrattle(), target);
  }

  // optional bool divine_shield = 19;
  if (this->divine_shield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        19, this->divine_shield(), target);
  }

  // optional bool stealth = 20;
  if (this->stealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        20, this->stealth(), target);
  }

  // optional bool choose_one = 21;
  if (this->choose_one() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        21, this->choose_one(), target);
  }

  // optional bool discover = 22;
  if (this->discover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        22, this->discover(), target);
  }

  // optional bool aura = 23;
  if (this->aura() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        23, this->aura(), target);
  }

  // optional bool elite = 24;
  if (this->elite() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        24, this->elite(), target);
  }

  // optional bool taunt = 25;
  if (this->taunt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        25, this->taunt(), target);
  }

  // optional int32 durability = 26;
  if (this->durability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        26, this->durability(), target);
  }

  // optional bool poison = 27;
  if (this->poison() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        27, this->poison(), target);
  }

  // optional bool adapt = 28;
  if (this->adapt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        28, this->adapt(), target);
  }

  // optional bool cant_targeted_by_spell = 29;
  if (this->cant_targeted_by_spell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        29, this->cant_targeted_by_spell(), target);
  }

  // optional bool cant_targeted_by_hero_power = 30;
  if (this->cant_targeted_by_hero_power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        30, this->cant_targeted_by_hero_power(), target);
  }

  // optional bool affected_by_spell_power = 31;
  if (this->affected_by_spell_power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        31, this->affected_by_spell_power(), target);
  }

  // optional bool freeze = 32;
  if (this->freeze() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        32, this->freeze(), target);
  }

  // optional bool silence = 33;
  if (this->silence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        33, this->silence(), target);
  }

  // optional bool windfury = 34;
  if (this->windfury() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        34, this->windfury(), target);
  }

  // optional bool combo = 35;
  if (this->combo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        35, this->combo(), target);
  }

  // optional bool secret = 36;
  if (this->secret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        36, this->secret(), target);
  }

  // optional bool overload = 37;
  if (this->overload() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        37, this->overload(), target);
  }

  // optional bool overload_owed = 38;
  if (this->overload_owed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        38, this->overload_owed(), target);
  }

  // optional bool immune = 39;
  if (this->immune() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        39, this->immune(), target);
  }

  // optional bool cant_attack = 40;
  if (this->cant_attack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        40, this->cant_attack(), target);
  }

  // optional bool enraged = 41;
  if (this->enraged() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        41, this->enraged(), target);
  }

  // optional bool quest = 42;
  if (this->quest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        42, this->quest(), target);
  }

  // optional bool spellpower = 43;
  if (this->spellpower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        43, this->spellpower(), target);
  }

  // optional bool double_spell_dmg = 44;
  if (this->double_spell_dmg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        44, this->double_spell_dmg(), target);
  }

  // optional bool armor = 45;
  if (this->armor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        45, this->armor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CardInfo)
  return target;
}

size_t CardInfo::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:CardInfo)
  size_t total_size = 0;

  // optional string card_id = 1;
  if (this->card_id().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->card_id());
  }

  // optional int32 health = 5;
  if (this->health() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->health());
  }

  // optional int32 attack = 6;
  if (this->attack() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->attack());
  }

  // optional int32 cost = 7;
  if (this->cost() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->cost());
  }

  // optional int32 card_set = 8;
  if (this->card_set() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->card_set());
  }

  // optional int32 class_name = 9;
  if (this->class_name() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->class_name());
  }

  // optional int32 card_type = 10;
  if (this->card_type() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->card_type());
  }

  // optional int32 rarity = 11;
  if (this->rarity() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->rarity());
  }

  // optional int32 collectible = 12;
  if (this->collectible() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->collectible());
  }

  // optional int32 hero_power_damage = 13;
  if (this->hero_power_damage() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->hero_power_damage());
  }

  // optional int32 card_race = 14;
  if (this->card_race() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->card_race());
  }

  // optional int32 durability = 26;
  if (this->durability() != 0) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->durability());
  }

  // optional bool charge = 15;
  if (this->charge() != 0) {
    total_size += 1 + 1;
  }

  // optional bool inspire = 16;
  if (this->inspire() != 0) {
    total_size += 2 + 1;
  }

  // optional bool battlecry = 17;
  if (this->battlecry() != 0) {
    total_size += 2 + 1;
  }

  // optional bool deathrattle = 18;
  if (this->deathrattle() != 0) {
    total_size += 2 + 1;
  }

  // optional bool divine_shield = 19;
  if (this->divine_shield() != 0) {
    total_size += 2 + 1;
  }

  // optional bool stealth = 20;
  if (this->stealth() != 0) {
    total_size += 2 + 1;
  }

  // optional bool choose_one = 21;
  if (this->choose_one() != 0) {
    total_size += 2 + 1;
  }

  // optional bool discover = 22;
  if (this->discover() != 0) {
    total_size += 2 + 1;
  }

  // optional bool aura = 23;
  if (this->aura() != 0) {
    total_size += 2 + 1;
  }

  // optional bool elite = 24;
  if (this->elite() != 0) {
    total_size += 2 + 1;
  }

  // optional bool taunt = 25;
  if (this->taunt() != 0) {
    total_size += 2 + 1;
  }

  // optional bool poison = 27;
  if (this->poison() != 0) {
    total_size += 2 + 1;
  }

  // optional bool adapt = 28;
  if (this->adapt() != 0) {
    total_size += 2 + 1;
  }

  // optional bool cant_targeted_by_spell = 29;
  if (this->cant_targeted_by_spell() != 0) {
    total_size += 2 + 1;
  }

  // optional bool cant_targeted_by_hero_power = 30;
  if (this->cant_targeted_by_hero_power() != 0) {
    total_size += 2 + 1;
  }

  // optional bool affected_by_spell_power = 31;
  if (this->affected_by_spell_power() != 0) {
    total_size += 2 + 1;
  }

  // optional bool freeze = 32;
  if (this->freeze() != 0) {
    total_size += 2 + 1;
  }

  // optional bool silence = 33;
  if (this->silence() != 0) {
    total_size += 2 + 1;
  }

  // optional bool windfury = 34;
  if (this->windfury() != 0) {
    total_size += 2 + 1;
  }

  // optional bool combo = 35;
  if (this->combo() != 0) {
    total_size += 2 + 1;
  }

  // optional bool secret = 36;
  if (this->secret() != 0) {
    total_size += 2 + 1;
  }

  // optional bool overload = 37;
  if (this->overload() != 0) {
    total_size += 2 + 1;
  }

  // optional bool overload_owed = 38;
  if (this->overload_owed() != 0) {
    total_size += 2 + 1;
  }

  // optional bool immune = 39;
  if (this->immune() != 0) {
    total_size += 2 + 1;
  }

  // optional bool cant_attack = 40;
  if (this->cant_attack() != 0) {
    total_size += 2 + 1;
  }

  // optional bool enraged = 41;
  if (this->enraged() != 0) {
    total_size += 2 + 1;
  }

  // optional bool quest = 42;
  if (this->quest() != 0) {
    total_size += 2 + 1;
  }

  // optional bool spellpower = 43;
  if (this->spellpower() != 0) {
    total_size += 2 + 1;
  }

  // optional bool double_spell_dmg = 44;
  if (this->double_spell_dmg() != 0) {
    total_size += 2 + 1;
  }

  // optional bool armor = 45;
  if (this->armor() != 0) {
    total_size += 2 + 1;
  }

  // map<string, string> card_name = 2;
  total_size +=
      1 * ::google::protobuf::internal::FromIntSize(this->card_name_size());
  {
    ::google::protobuf::scoped_ptr<CardInfo_CardNameEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator
             it = this->card_name().begin();
         it != this->card_name().end(); ++it) {
      entry.reset(card_name_.NewEntryWrapper(it->first, it->second));
      total_size +=
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              *entry);
    }
  }

  // map<string, string> card_text_inhand = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(
                        this->card_text_inhand_size());
  {
    ::google::protobuf::scoped_ptr<CardInfo_CardTextInhandEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator
             it = this->card_text_inhand().begin();
         it != this->card_text_inhand().end(); ++it) {
      entry.reset(card_text_inhand_.NewEntryWrapper(it->first, it->second));
      total_size +=
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              *entry);
    }
  }

  // map<string, string> flavor_text = 4;
  total_size +=
      1 * ::google::protobuf::internal::FromIntSize(this->flavor_text_size());
  {
    ::google::protobuf::scoped_ptr<CardInfo_FlavorTextEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator
             it = this->flavor_text().begin();
         it != this->flavor_text().end(); ++it) {
      entry.reset(flavor_text_.NewEntryWrapper(it->first, it->second));
      total_size +=
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              *entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:CardInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardInfo>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:CardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:CardInfo)
    UnsafeMergeFrom(*source);
  }
}

void CardInfo::MergeFrom(const CardInfo& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:CardInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CardInfo::UnsafeMergeFrom(const CardInfo& from) {
  GOOGLE_DCHECK(&from != this);
  card_name_.MergeFrom(from.card_name_);
  card_text_inhand_.MergeFrom(from.card_text_inhand_);
  flavor_text_.MergeFrom(from.flavor_text_);
  if (from.card_id().size() > 0) {
    card_id_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.card_id_);
  }
  if (from.health() != 0) {
    set_health(from.health());
  }
  if (from.attack() != 0) {
    set_attack(from.attack());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
  if (from.card_set() != 0) {
    set_card_set(from.card_set());
  }
  if (from.class_name() != 0) {
    set_class_name(from.class_name());
  }
  if (from.card_type() != 0) {
    set_card_type(from.card_type());
  }
  if (from.rarity() != 0) {
    set_rarity(from.rarity());
  }
  if (from.collectible() != 0) {
    set_collectible(from.collectible());
  }
  if (from.hero_power_damage() != 0) {
    set_hero_power_damage(from.hero_power_damage());
  }
  if (from.card_race() != 0) {
    set_card_race(from.card_race());
  }
  if (from.durability() != 0) {
    set_durability(from.durability());
  }
  if (from.charge() != 0) {
    set_charge(from.charge());
  }
  if (from.inspire() != 0) {
    set_inspire(from.inspire());
  }
  if (from.battlecry() != 0) {
    set_battlecry(from.battlecry());
  }
  if (from.deathrattle() != 0) {
    set_deathrattle(from.deathrattle());
  }
  if (from.divine_shield() != 0) {
    set_divine_shield(from.divine_shield());
  }
  if (from.stealth() != 0) {
    set_stealth(from.stealth());
  }
  if (from.choose_one() != 0) {
    set_choose_one(from.choose_one());
  }
  if (from.discover() != 0) {
    set_discover(from.discover());
  }
  if (from.aura() != 0) {
    set_aura(from.aura());
  }
  if (from.elite() != 0) {
    set_elite(from.elite());
  }
  if (from.taunt() != 0) {
    set_taunt(from.taunt());
  }
  if (from.poison() != 0) {
    set_poison(from.poison());
  }
  if (from.adapt() != 0) {
    set_adapt(from.adapt());
  }
  if (from.cant_targeted_by_spell() != 0) {
    set_cant_targeted_by_spell(from.cant_targeted_by_spell());
  }
  if (from.cant_targeted_by_hero_power() != 0) {
    set_cant_targeted_by_hero_power(from.cant_targeted_by_hero_power());
  }
  if (from.affected_by_spell_power() != 0) {
    set_affected_by_spell_power(from.affected_by_spell_power());
  }
  if (from.freeze() != 0) {
    set_freeze(from.freeze());
  }
  if (from.silence() != 0) {
    set_silence(from.silence());
  }
  if (from.windfury() != 0) {
    set_windfury(from.windfury());
  }
  if (from.combo() != 0) {
    set_combo(from.combo());
  }
  if (from.secret() != 0) {
    set_secret(from.secret());
  }
  if (from.overload() != 0) {
    set_overload(from.overload());
  }
  if (from.overload_owed() != 0) {
    set_overload_owed(from.overload_owed());
  }
  if (from.immune() != 0) {
    set_immune(from.immune());
  }
  if (from.cant_attack() != 0) {
    set_cant_attack(from.cant_attack());
  }
  if (from.enraged() != 0) {
    set_enraged(from.enraged());
  }
  if (from.quest() != 0) {
    set_quest(from.quest());
  }
  if (from.spellpower() != 0) {
    set_spellpower(from.spellpower());
  }
  if (from.double_spell_dmg() != 0) {
    set_double_spell_dmg(from.double_spell_dmg());
  }
  if (from.armor() != 0) {
    set_armor(from.armor());
  }
}

void CardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:CardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardInfo::CopyFrom(const CardInfo& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:CardInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CardInfo::IsInitialized() const { return true; }

void CardInfo::Swap(CardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardInfo::InternalSwap(CardInfo* other) {
  card_id_.Swap(&other->card_id_);
  card_name_.Swap(&other->card_name_);
  card_text_inhand_.Swap(&other->card_text_inhand_);
  flavor_text_.Swap(&other->flavor_text_);
  std::swap(health_, other->health_);
  std::swap(attack_, other->attack_);
  std::swap(cost_, other->cost_);
  std::swap(card_set_, other->card_set_);
  std::swap(class_name_, other->class_name_);
  std::swap(card_type_, other->card_type_);
  std::swap(rarity_, other->rarity_);
  std::swap(collectible_, other->collectible_);
  std::swap(hero_power_damage_, other->hero_power_damage_);
  std::swap(card_race_, other->card_race_);
  std::swap(durability_, other->durability_);
  std::swap(charge_, other->charge_);
  std::swap(inspire_, other->inspire_);
  std::swap(battlecry_, other->battlecry_);
  std::swap(deathrattle_, other->deathrattle_);
  std::swap(divine_shield_, other->divine_shield_);
  std::swap(stealth_, other->stealth_);
  std::swap(choose_one_, other->choose_one_);
  std::swap(discover_, other->discover_);
  std::swap(aura_, other->aura_);
  std::swap(elite_, other->elite_);
  std::swap(taunt_, other->taunt_);
  std::swap(poison_, other->poison_);
  std::swap(adapt_, other->adapt_);
  std::swap(cant_targeted_by_spell_, other->cant_targeted_by_spell_);
  std::swap(cant_targeted_by_hero_power_, other->cant_targeted_by_hero_power_);
  std::swap(affected_by_spell_power_, other->affected_by_spell_power_);
  std::swap(freeze_, other->freeze_);
  std::swap(silence_, other->silence_);
  std::swap(windfury_, other->windfury_);
  std::swap(combo_, other->combo_);
  std::swap(secret_, other->secret_);
  std::swap(overload_, other->overload_);
  std::swap(overload_owed_, other->overload_owed_);
  std::swap(immune_, other->immune_);
  std::swap(cant_attack_, other->cant_attack_);
  std::swap(enraged_, other->enraged_);
  std::swap(quest_, other->quest_);
  std::swap(spellpower_, other->spellpower_);
  std::swap(double_spell_dmg_, other->double_spell_dmg_);
  std::swap(armor_, other->armor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardInfo_descriptor_;
  metadata.reflection = CardInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardInfo

// optional string card_id = 1;
void CardInfo::clear_card_id() {
  card_id_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CardInfo::card_id() const {
  // @@protoc_insertion_point(field_get:CardInfo.card_id)
  return card_id_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardInfo::set_card_id(const ::std::string& value) {
  card_id_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CardInfo.card_id)
}
void CardInfo::set_card_id(const char* value) {
  card_id_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CardInfo.card_id)
}
void CardInfo::set_card_id(const char* value, size_t size) {
  card_id_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CardInfo.card_id)
}
::std::string* CardInfo::mutable_card_id() {
  // @@protoc_insertion_point(field_mutable:CardInfo.card_id)
  return card_id_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CardInfo::release_card_id() {
  // @@protoc_insertion_point(field_release:CardInfo.card_id)

  return card_id_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardInfo::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
  } else {
  }
  card_id_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:CardInfo.card_id)
}

// map<string, string> card_name = 2;
int CardInfo::card_name_size() const { return card_name_.size(); }
void CardInfo::clear_card_name() { card_name_.Clear(); }
const ::google::protobuf::Map< ::std::string, ::std::string>&
CardInfo::card_name() const {
  // @@protoc_insertion_point(field_map:CardInfo.card_name)
  return card_name_.GetMap();
}
::google::protobuf::Map< ::std::string, ::std::string>*
CardInfo::mutable_card_name() {
  // @@protoc_insertion_point(field_mutable_map:CardInfo.card_name)
  return card_name_.MutableMap();
}

// map<string, string> card_text_inhand = 3;
int CardInfo::card_text_inhand_size() const { return card_text_inhand_.size(); }
void CardInfo::clear_card_text_inhand() { card_text_inhand_.Clear(); }
const ::google::protobuf::Map< ::std::string, ::std::string>&
CardInfo::card_text_inhand() const {
  // @@protoc_insertion_point(field_map:CardInfo.card_text_inhand)
  return card_text_inhand_.GetMap();
}
::google::protobuf::Map< ::std::string, ::std::string>*
CardInfo::mutable_card_text_inhand() {
  // @@protoc_insertion_point(field_mutable_map:CardInfo.card_text_inhand)
  return card_text_inhand_.MutableMap();
}

// map<string, string> flavor_text = 4;
int CardInfo::flavor_text_size() const { return flavor_text_.size(); }
void CardInfo::clear_flavor_text() { flavor_text_.Clear(); }
const ::google::protobuf::Map< ::std::string, ::std::string>&
CardInfo::flavor_text() const {
  // @@protoc_insertion_point(field_map:CardInfo.flavor_text)
  return flavor_text_.GetMap();
}
::google::protobuf::Map< ::std::string, ::std::string>*
CardInfo::mutable_flavor_text() {
  // @@protoc_insertion_point(field_mutable_map:CardInfo.flavor_text)
  return flavor_text_.MutableMap();
}

// optional int32 health = 5;
void CardInfo::clear_health() { health_ = 0; }
::google::protobuf::int32 CardInfo::health() const {
  // @@protoc_insertion_point(field_get:CardInfo.health)
  return health_;
}
void CardInfo::set_health(::google::protobuf::int32 value) {
  health_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.health)
}

// optional int32 attack = 6;
void CardInfo::clear_attack() { attack_ = 0; }
::google::protobuf::int32 CardInfo::attack() const {
  // @@protoc_insertion_point(field_get:CardInfo.attack)
  return attack_;
}
void CardInfo::set_attack(::google::protobuf::int32 value) {
  attack_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.attack)
}

// optional int32 cost = 7;
void CardInfo::clear_cost() { cost_ = 0; }
::google::protobuf::int32 CardInfo::cost() const {
  // @@protoc_insertion_point(field_get:CardInfo.cost)
  return cost_;
}
void CardInfo::set_cost(::google::protobuf::int32 value) {
  cost_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.cost)
}

// optional int32 card_set = 8;
void CardInfo::clear_card_set() { card_set_ = 0; }
::google::protobuf::int32 CardInfo::card_set() const {
  // @@protoc_insertion_point(field_get:CardInfo.card_set)
  return card_set_;
}
void CardInfo::set_card_set(::google::protobuf::int32 value) {
  card_set_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.card_set)
}

// optional int32 class_name = 9;
void CardInfo::clear_class_name() { class_name_ = 0; }
::google::protobuf::int32 CardInfo::class_name() const {
  // @@protoc_insertion_point(field_get:CardInfo.class_name)
  return class_name_;
}
void CardInfo::set_class_name(::google::protobuf::int32 value) {
  class_name_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.class_name)
}

// optional int32 card_type = 10;
void CardInfo::clear_card_type() { card_type_ = 0; }
::google::protobuf::int32 CardInfo::card_type() const {
  // @@protoc_insertion_point(field_get:CardInfo.card_type)
  return card_type_;
}
void CardInfo::set_card_type(::google::protobuf::int32 value) {
  card_type_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.card_type)
}

// optional int32 rarity = 11;
void CardInfo::clear_rarity() { rarity_ = 0; }
::google::protobuf::int32 CardInfo::rarity() const {
  // @@protoc_insertion_point(field_get:CardInfo.rarity)
  return rarity_;
}
void CardInfo::set_rarity(::google::protobuf::int32 value) {
  rarity_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.rarity)
}

// optional int32 collectible = 12;
void CardInfo::clear_collectible() { collectible_ = 0; }
::google::protobuf::int32 CardInfo::collectible() const {
  // @@protoc_insertion_point(field_get:CardInfo.collectible)
  return collectible_;
}
void CardInfo::set_collectible(::google::protobuf::int32 value) {
  collectible_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.collectible)
}

// optional int32 hero_power_damage = 13;
void CardInfo::clear_hero_power_damage() { hero_power_damage_ = 0; }
::google::protobuf::int32 CardInfo::hero_power_damage() const {
  // @@protoc_insertion_point(field_get:CardInfo.hero_power_damage)
  return hero_power_damage_;
}
void CardInfo::set_hero_power_damage(::google::protobuf::int32 value) {
  hero_power_damage_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.hero_power_damage)
}

// optional int32 card_race = 14;
void CardInfo::clear_card_race() { card_race_ = 0; }
::google::protobuf::int32 CardInfo::card_race() const {
  // @@protoc_insertion_point(field_get:CardInfo.card_race)
  return card_race_;
}
void CardInfo::set_card_race(::google::protobuf::int32 value) {
  card_race_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.card_race)
}

// optional int32 durability = 26;
void CardInfo::clear_durability() { durability_ = 0; }
::google::protobuf::int32 CardInfo::durability() const {
  // @@protoc_insertion_point(field_get:CardInfo.durability)
  return durability_;
}
void CardInfo::set_durability(::google::protobuf::int32 value) {
  durability_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.durability)
}

// optional bool charge = 15;
void CardInfo::clear_charge() { charge_ = false; }
bool CardInfo::charge() const {
  // @@protoc_insertion_point(field_get:CardInfo.charge)
  return charge_;
}
void CardInfo::set_charge(bool value) {
  charge_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.charge)
}

// optional bool inspire = 16;
void CardInfo::clear_inspire() { inspire_ = false; }
bool CardInfo::inspire() const {
  // @@protoc_insertion_point(field_get:CardInfo.inspire)
  return inspire_;
}
void CardInfo::set_inspire(bool value) {
  inspire_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.inspire)
}

// optional bool battlecry = 17;
void CardInfo::clear_battlecry() { battlecry_ = false; }
bool CardInfo::battlecry() const {
  // @@protoc_insertion_point(field_get:CardInfo.battlecry)
  return battlecry_;
}
void CardInfo::set_battlecry(bool value) {
  battlecry_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.battlecry)
}

// optional bool deathrattle = 18;
void CardInfo::clear_deathrattle() { deathrattle_ = false; }
bool CardInfo::deathrattle() const {
  // @@protoc_insertion_point(field_get:CardInfo.deathrattle)
  return deathrattle_;
}
void CardInfo::set_deathrattle(bool value) {
  deathrattle_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.deathrattle)
}

// optional bool divine_shield = 19;
void CardInfo::clear_divine_shield() { divine_shield_ = false; }
bool CardInfo::divine_shield() const {
  // @@protoc_insertion_point(field_get:CardInfo.divine_shield)
  return divine_shield_;
}
void CardInfo::set_divine_shield(bool value) {
  divine_shield_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.divine_shield)
}

// optional bool stealth = 20;
void CardInfo::clear_stealth() { stealth_ = false; }
bool CardInfo::stealth() const {
  // @@protoc_insertion_point(field_get:CardInfo.stealth)
  return stealth_;
}
void CardInfo::set_stealth(bool value) {
  stealth_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.stealth)
}

// optional bool choose_one = 21;
void CardInfo::clear_choose_one() { choose_one_ = false; }
bool CardInfo::choose_one() const {
  // @@protoc_insertion_point(field_get:CardInfo.choose_one)
  return choose_one_;
}
void CardInfo::set_choose_one(bool value) {
  choose_one_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.choose_one)
}

// optional bool discover = 22;
void CardInfo::clear_discover() { discover_ = false; }
bool CardInfo::discover() const {
  // @@protoc_insertion_point(field_get:CardInfo.discover)
  return discover_;
}
void CardInfo::set_discover(bool value) {
  discover_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.discover)
}

// optional bool aura = 23;
void CardInfo::clear_aura() { aura_ = false; }
bool CardInfo::aura() const {
  // @@protoc_insertion_point(field_get:CardInfo.aura)
  return aura_;
}
void CardInfo::set_aura(bool value) {
  aura_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.aura)
}

// optional bool elite = 24;
void CardInfo::clear_elite() { elite_ = false; }
bool CardInfo::elite() const {
  // @@protoc_insertion_point(field_get:CardInfo.elite)
  return elite_;
}
void CardInfo::set_elite(bool value) {
  elite_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.elite)
}

// optional bool taunt = 25;
void CardInfo::clear_taunt() { taunt_ = false; }
bool CardInfo::taunt() const {
  // @@protoc_insertion_point(field_get:CardInfo.taunt)
  return taunt_;
}
void CardInfo::set_taunt(bool value) {
  taunt_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.taunt)
}

// optional bool poison = 27;
void CardInfo::clear_poison() { poison_ = false; }
bool CardInfo::poison() const {
  // @@protoc_insertion_point(field_get:CardInfo.poison)
  return poison_;
}
void CardInfo::set_poison(bool value) {
  poison_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.poison)
}

// optional bool adapt = 28;
void CardInfo::clear_adapt() { adapt_ = false; }
bool CardInfo::adapt() const {
  // @@protoc_insertion_point(field_get:CardInfo.adapt)
  return adapt_;
}
void CardInfo::set_adapt(bool value) {
  adapt_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.adapt)
}

// optional bool cant_targeted_by_spell = 29;
void CardInfo::clear_cant_targeted_by_spell() {
  cant_targeted_by_spell_ = false;
}
bool CardInfo::cant_targeted_by_spell() const {
  // @@protoc_insertion_point(field_get:CardInfo.cant_targeted_by_spell)
  return cant_targeted_by_spell_;
}
void CardInfo::set_cant_targeted_by_spell(bool value) {
  cant_targeted_by_spell_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.cant_targeted_by_spell)
}

// optional bool cant_targeted_by_hero_power = 30;
void CardInfo::clear_cant_targeted_by_hero_power() {
  cant_targeted_by_hero_power_ = false;
}
bool CardInfo::cant_targeted_by_hero_power() const {
  // @@protoc_insertion_point(field_get:CardInfo.cant_targeted_by_hero_power)
  return cant_targeted_by_hero_power_;
}
void CardInfo::set_cant_targeted_by_hero_power(bool value) {
  cant_targeted_by_hero_power_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.cant_targeted_by_hero_power)
}

// optional bool affected_by_spell_power = 31;
void CardInfo::clear_affected_by_spell_power() {
  affected_by_spell_power_ = false;
}
bool CardInfo::affected_by_spell_power() const {
  // @@protoc_insertion_point(field_get:CardInfo.affected_by_spell_power)
  return affected_by_spell_power_;
}
void CardInfo::set_affected_by_spell_power(bool value) {
  affected_by_spell_power_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.affected_by_spell_power)
}

// optional bool freeze = 32;
void CardInfo::clear_freeze() { freeze_ = false; }
bool CardInfo::freeze() const {
  // @@protoc_insertion_point(field_get:CardInfo.freeze)
  return freeze_;
}
void CardInfo::set_freeze(bool value) {
  freeze_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.freeze)
}

// optional bool silence = 33;
void CardInfo::clear_silence() { silence_ = false; }
bool CardInfo::silence() const {
  // @@protoc_insertion_point(field_get:CardInfo.silence)
  return silence_;
}
void CardInfo::set_silence(bool value) {
  silence_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.silence)
}

// optional bool windfury = 34;
void CardInfo::clear_windfury() { windfury_ = false; }
bool CardInfo::windfury() const {
  // @@protoc_insertion_point(field_get:CardInfo.windfury)
  return windfury_;
}
void CardInfo::set_windfury(bool value) {
  windfury_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.windfury)
}

// optional bool combo = 35;
void CardInfo::clear_combo() { combo_ = false; }
bool CardInfo::combo() const {
  // @@protoc_insertion_point(field_get:CardInfo.combo)
  return combo_;
}
void CardInfo::set_combo(bool value) {
  combo_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.combo)
}

// optional bool secret = 36;
void CardInfo::clear_secret() { secret_ = false; }
bool CardInfo::secret() const {
  // @@protoc_insertion_point(field_get:CardInfo.secret)
  return secret_;
}
void CardInfo::set_secret(bool value) {
  secret_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.secret)
}

// optional bool overload = 37;
void CardInfo::clear_overload() { overload_ = false; }
bool CardInfo::overload() const {
  // @@protoc_insertion_point(field_get:CardInfo.overload)
  return overload_;
}
void CardInfo::set_overload(bool value) {
  overload_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.overload)
}

// optional bool overload_owed = 38;
void CardInfo::clear_overload_owed() { overload_owed_ = false; }
bool CardInfo::overload_owed() const {
  // @@protoc_insertion_point(field_get:CardInfo.overload_owed)
  return overload_owed_;
}
void CardInfo::set_overload_owed(bool value) {
  overload_owed_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.overload_owed)
}

// optional bool immune = 39;
void CardInfo::clear_immune() { immune_ = false; }
bool CardInfo::immune() const {
  // @@protoc_insertion_point(field_get:CardInfo.immune)
  return immune_;
}
void CardInfo::set_immune(bool value) {
  immune_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.immune)
}

// optional bool cant_attack = 40;
void CardInfo::clear_cant_attack() { cant_attack_ = false; }
bool CardInfo::cant_attack() const {
  // @@protoc_insertion_point(field_get:CardInfo.cant_attack)
  return cant_attack_;
}
void CardInfo::set_cant_attack(bool value) {
  cant_attack_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.cant_attack)
}

// optional bool enraged = 41;
void CardInfo::clear_enraged() { enraged_ = false; }
bool CardInfo::enraged() const {
  // @@protoc_insertion_point(field_get:CardInfo.enraged)
  return enraged_;
}
void CardInfo::set_enraged(bool value) {
  enraged_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.enraged)
}

// optional bool quest = 42;
void CardInfo::clear_quest() { quest_ = false; }
bool CardInfo::quest() const {
  // @@protoc_insertion_point(field_get:CardInfo.quest)
  return quest_;
}
void CardInfo::set_quest(bool value) {
  quest_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.quest)
}

// optional bool spellpower = 43;
void CardInfo::clear_spellpower() { spellpower_ = false; }
bool CardInfo::spellpower() const {
  // @@protoc_insertion_point(field_get:CardInfo.spellpower)
  return spellpower_;
}
void CardInfo::set_spellpower(bool value) {
  spellpower_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.spellpower)
}

// optional bool double_spell_dmg = 44;
void CardInfo::clear_double_spell_dmg() { double_spell_dmg_ = false; }
bool CardInfo::double_spell_dmg() const {
  // @@protoc_insertion_point(field_get:CardInfo.double_spell_dmg)
  return double_spell_dmg_;
}
void CardInfo::set_double_spell_dmg(bool value) {
  double_spell_dmg_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.double_spell_dmg)
}

// optional bool armor = 45;
void CardInfo::clear_armor() { armor_ = false; }
bool CardInfo::armor() const {
  // @@protoc_insertion_point(field_get:CardInfo.armor)
  return armor_;
}
void CardInfo::set_armor(bool value) {
  armor_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.armor)
}

inline const CardInfo* CardInfo::internal_default_instance() {
  return &CardInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
