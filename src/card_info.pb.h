// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: card_info.proto

#ifndef PROTOBUF_card_5finfo_2eproto__INCLUDED
#define PROTOBUF_card_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_card_5finfo_2eproto();
void protobuf_InitDefaults_card_5finfo_2eproto();
void protobuf_AssignDesc_card_5finfo_2eproto();
void protobuf_ShutdownFile_card_5finfo_2eproto();

class CardInfo;

// ===================================================================

class CardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CardInfo) */ {
 public:
  CardInfo();
  virtual ~CardInfo();

  CardInfo(const CardInfo& from);

  inline CardInfo& operator=(const CardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardInfo& default_instance();

  static const CardInfo* internal_default_instance();

  void Swap(CardInfo* other);

  // implements Message ----------------------------------------------

  inline CardInfo* New() const { return New(NULL); }

  CardInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardInfo& from);
  void MergeFrom(const CardInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CardInfo* other);
  void UnsafeMergeFrom(const CardInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string card_id = 1;
  void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  const ::std::string& card_id() const;
  void set_card_id(const ::std::string& value);
  void set_card_id(const char* value);
  void set_card_id(const char* value, size_t size);
  ::std::string* mutable_card_id();
  ::std::string* release_card_id();
  void set_allocated_card_id(::std::string* card_id);

  // map<string, string> card_name = 2;
  int card_name_size() const;
  void clear_card_name();
  static const int kCardNameFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      card_name() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_card_name();

  // map<string, string> card_text_inhand = 3;
  int card_text_inhand_size() const;
  void clear_card_text_inhand();
  static const int kCardTextInhandFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      card_text_inhand() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_card_text_inhand();

  // map<string, string> flavor_text = 4;
  int flavor_text_size() const;
  void clear_flavor_text();
  static const int kFlavorTextFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      flavor_text() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_flavor_text();

  // optional int32 health = 5;
  void clear_health();
  static const int kHealthFieldNumber = 5;
  ::google::protobuf::int32 health() const;
  void set_health(::google::protobuf::int32 value);

  // optional int32 attack = 6;
  void clear_attack();
  static const int kAttackFieldNumber = 6;
  ::google::protobuf::int32 attack() const;
  void set_attack(::google::protobuf::int32 value);

  // optional int32 cost = 7;
  void clear_cost();
  static const int kCostFieldNumber = 7;
  ::google::protobuf::int32 cost() const;
  void set_cost(::google::protobuf::int32 value);

  // optional int32 card_set = 8;
  void clear_card_set();
  static const int kCardSetFieldNumber = 8;
  ::google::protobuf::int32 card_set() const;
  void set_card_set(::google::protobuf::int32 value);

  // optional int32 class_name = 9;
  void clear_class_name();
  static const int kClassNameFieldNumber = 9;
  ::google::protobuf::int32 class_name() const;
  void set_class_name(::google::protobuf::int32 value);

  // optional int32 card_type = 10;
  void clear_card_type();
  static const int kCardTypeFieldNumber = 10;
  ::google::protobuf::int32 card_type() const;
  void set_card_type(::google::protobuf::int32 value);

  // optional int32 rarity = 11;
  void clear_rarity();
  static const int kRarityFieldNumber = 11;
  ::google::protobuf::int32 rarity() const;
  void set_rarity(::google::protobuf::int32 value);

  // optional int32 collectible = 12;
  void clear_collectible();
  static const int kCollectibleFieldNumber = 12;
  ::google::protobuf::int32 collectible() const;
  void set_collectible(::google::protobuf::int32 value);

  // optional int32 hero_power_damage = 13;
  void clear_hero_power_damage();
  static const int kHeroPowerDamageFieldNumber = 13;
  ::google::protobuf::int32 hero_power_damage() const;
  void set_hero_power_damage(::google::protobuf::int32 value);

  // optional int32 card_race = 14;
  void clear_card_race();
  static const int kCardRaceFieldNumber = 14;
  ::google::protobuf::int32 card_race() const;
  void set_card_race(::google::protobuf::int32 value);

  // optional bool charge = 15;
  void clear_charge();
  static const int kChargeFieldNumber = 15;
  bool charge() const;
  void set_charge(bool value);

  // optional bool inspire = 16;
  void clear_inspire();
  static const int kInspireFieldNumber = 16;
  bool inspire() const;
  void set_inspire(bool value);

  // optional bool battlecry = 17;
  void clear_battlecry();
  static const int kBattlecryFieldNumber = 17;
  bool battlecry() const;
  void set_battlecry(bool value);

  // optional bool deathrattle = 18;
  void clear_deathrattle();
  static const int kDeathrattleFieldNumber = 18;
  bool deathrattle() const;
  void set_deathrattle(bool value);

  // optional bool divine_shield = 19;
  void clear_divine_shield();
  static const int kDivineShieldFieldNumber = 19;
  bool divine_shield() const;
  void set_divine_shield(bool value);

  // optional bool stealth = 20;
  void clear_stealth();
  static const int kStealthFieldNumber = 20;
  bool stealth() const;
  void set_stealth(bool value);

  // optional bool choose_one = 21;
  void clear_choose_one();
  static const int kChooseOneFieldNumber = 21;
  bool choose_one() const;
  void set_choose_one(bool value);

  // optional bool discover = 22;
  void clear_discover();
  static const int kDiscoverFieldNumber = 22;
  bool discover() const;
  void set_discover(bool value);

  // optional bool aura = 23;
  void clear_aura();
  static const int kAuraFieldNumber = 23;
  bool aura() const;
  void set_aura(bool value);

  // optional bool elite = 24;
  void clear_elite();
  static const int kEliteFieldNumber = 24;
  bool elite() const;
  void set_elite(bool value);

  // optional bool taunt = 25;
  void clear_taunt();
  static const int kTauntFieldNumber = 25;
  bool taunt() const;
  void set_taunt(bool value);

  // @@protoc_insertion_point(class_scope:CardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      CardInfo_CardNameEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > card_name_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      CardInfo_CardTextInhandEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > card_text_inhand_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      CardInfo_FlavorTextEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > flavor_text_;
  ::google::protobuf::internal::ArenaStringPtr card_id_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 attack_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 card_set_;
  ::google::protobuf::int32 class_name_;
  ::google::protobuf::int32 card_type_;
  ::google::protobuf::int32 rarity_;
  ::google::protobuf::int32 collectible_;
  ::google::protobuf::int32 hero_power_damage_;
  ::google::protobuf::int32 card_race_;
  bool charge_;
  bool inspire_;
  bool battlecry_;
  bool deathrattle_;
  bool divine_shield_;
  bool stealth_;
  bool choose_one_;
  bool discover_;
  bool aura_;
  bool elite_;
  bool taunt_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_card_5finfo_2eproto_impl();
  friend void  protobuf_AddDesc_card_5finfo_2eproto_impl();
  friend void protobuf_AssignDesc_card_5finfo_2eproto();
  friend void protobuf_ShutdownFile_card_5finfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CardInfo> CardInfo_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CardInfo

// optional string card_id = 1;
inline void CardInfo::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CardInfo::card_id() const {
  // @@protoc_insertion_point(field_get:CardInfo.card_id)
  return card_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CardInfo::set_card_id(const ::std::string& value) {
  
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CardInfo.card_id)
}
inline void CardInfo::set_card_id(const char* value) {
  
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CardInfo.card_id)
}
inline void CardInfo::set_card_id(const char* value, size_t size) {
  
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CardInfo.card_id)
}
inline ::std::string* CardInfo::mutable_card_id() {
  
  // @@protoc_insertion_point(field_mutable:CardInfo.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CardInfo::release_card_id() {
  // @@protoc_insertion_point(field_release:CardInfo.card_id)
  
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CardInfo::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    
  } else {
    
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:CardInfo.card_id)
}

// map<string, string> card_name = 2;
inline int CardInfo::card_name_size() const {
  return card_name_.size();
}
inline void CardInfo::clear_card_name() {
  card_name_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CardInfo::card_name() const {
  // @@protoc_insertion_point(field_map:CardInfo.card_name)
  return card_name_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CardInfo::mutable_card_name() {
  // @@protoc_insertion_point(field_mutable_map:CardInfo.card_name)
  return card_name_.MutableMap();
}

// map<string, string> card_text_inhand = 3;
inline int CardInfo::card_text_inhand_size() const {
  return card_text_inhand_.size();
}
inline void CardInfo::clear_card_text_inhand() {
  card_text_inhand_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CardInfo::card_text_inhand() const {
  // @@protoc_insertion_point(field_map:CardInfo.card_text_inhand)
  return card_text_inhand_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CardInfo::mutable_card_text_inhand() {
  // @@protoc_insertion_point(field_mutable_map:CardInfo.card_text_inhand)
  return card_text_inhand_.MutableMap();
}

// map<string, string> flavor_text = 4;
inline int CardInfo::flavor_text_size() const {
  return flavor_text_.size();
}
inline void CardInfo::clear_flavor_text() {
  flavor_text_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CardInfo::flavor_text() const {
  // @@protoc_insertion_point(field_map:CardInfo.flavor_text)
  return flavor_text_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CardInfo::mutable_flavor_text() {
  // @@protoc_insertion_point(field_mutable_map:CardInfo.flavor_text)
  return flavor_text_.MutableMap();
}

// optional int32 health = 5;
inline void CardInfo::clear_health() {
  health_ = 0;
}
inline ::google::protobuf::int32 CardInfo::health() const {
  // @@protoc_insertion_point(field_get:CardInfo.health)
  return health_;
}
inline void CardInfo::set_health(::google::protobuf::int32 value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.health)
}

// optional int32 attack = 6;
inline void CardInfo::clear_attack() {
  attack_ = 0;
}
inline ::google::protobuf::int32 CardInfo::attack() const {
  // @@protoc_insertion_point(field_get:CardInfo.attack)
  return attack_;
}
inline void CardInfo::set_attack(::google::protobuf::int32 value) {
  
  attack_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.attack)
}

// optional int32 cost = 7;
inline void CardInfo::clear_cost() {
  cost_ = 0;
}
inline ::google::protobuf::int32 CardInfo::cost() const {
  // @@protoc_insertion_point(field_get:CardInfo.cost)
  return cost_;
}
inline void CardInfo::set_cost(::google::protobuf::int32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.cost)
}

// optional int32 card_set = 8;
inline void CardInfo::clear_card_set() {
  card_set_ = 0;
}
inline ::google::protobuf::int32 CardInfo::card_set() const {
  // @@protoc_insertion_point(field_get:CardInfo.card_set)
  return card_set_;
}
inline void CardInfo::set_card_set(::google::protobuf::int32 value) {
  
  card_set_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.card_set)
}

// optional int32 class_name = 9;
inline void CardInfo::clear_class_name() {
  class_name_ = 0;
}
inline ::google::protobuf::int32 CardInfo::class_name() const {
  // @@protoc_insertion_point(field_get:CardInfo.class_name)
  return class_name_;
}
inline void CardInfo::set_class_name(::google::protobuf::int32 value) {
  
  class_name_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.class_name)
}

// optional int32 card_type = 10;
inline void CardInfo::clear_card_type() {
  card_type_ = 0;
}
inline ::google::protobuf::int32 CardInfo::card_type() const {
  // @@protoc_insertion_point(field_get:CardInfo.card_type)
  return card_type_;
}
inline void CardInfo::set_card_type(::google::protobuf::int32 value) {
  
  card_type_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.card_type)
}

// optional int32 rarity = 11;
inline void CardInfo::clear_rarity() {
  rarity_ = 0;
}
inline ::google::protobuf::int32 CardInfo::rarity() const {
  // @@protoc_insertion_point(field_get:CardInfo.rarity)
  return rarity_;
}
inline void CardInfo::set_rarity(::google::protobuf::int32 value) {
  
  rarity_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.rarity)
}

// optional int32 collectible = 12;
inline void CardInfo::clear_collectible() {
  collectible_ = 0;
}
inline ::google::protobuf::int32 CardInfo::collectible() const {
  // @@protoc_insertion_point(field_get:CardInfo.collectible)
  return collectible_;
}
inline void CardInfo::set_collectible(::google::protobuf::int32 value) {
  
  collectible_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.collectible)
}

// optional int32 hero_power_damage = 13;
inline void CardInfo::clear_hero_power_damage() {
  hero_power_damage_ = 0;
}
inline ::google::protobuf::int32 CardInfo::hero_power_damage() const {
  // @@protoc_insertion_point(field_get:CardInfo.hero_power_damage)
  return hero_power_damage_;
}
inline void CardInfo::set_hero_power_damage(::google::protobuf::int32 value) {
  
  hero_power_damage_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.hero_power_damage)
}

// optional int32 card_race = 14;
inline void CardInfo::clear_card_race() {
  card_race_ = 0;
}
inline ::google::protobuf::int32 CardInfo::card_race() const {
  // @@protoc_insertion_point(field_get:CardInfo.card_race)
  return card_race_;
}
inline void CardInfo::set_card_race(::google::protobuf::int32 value) {
  
  card_race_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.card_race)
}

// optional bool charge = 15;
inline void CardInfo::clear_charge() {
  charge_ = false;
}
inline bool CardInfo::charge() const {
  // @@protoc_insertion_point(field_get:CardInfo.charge)
  return charge_;
}
inline void CardInfo::set_charge(bool value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.charge)
}

// optional bool inspire = 16;
inline void CardInfo::clear_inspire() {
  inspire_ = false;
}
inline bool CardInfo::inspire() const {
  // @@protoc_insertion_point(field_get:CardInfo.inspire)
  return inspire_;
}
inline void CardInfo::set_inspire(bool value) {
  
  inspire_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.inspire)
}

// optional bool battlecry = 17;
inline void CardInfo::clear_battlecry() {
  battlecry_ = false;
}
inline bool CardInfo::battlecry() const {
  // @@protoc_insertion_point(field_get:CardInfo.battlecry)
  return battlecry_;
}
inline void CardInfo::set_battlecry(bool value) {
  
  battlecry_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.battlecry)
}

// optional bool deathrattle = 18;
inline void CardInfo::clear_deathrattle() {
  deathrattle_ = false;
}
inline bool CardInfo::deathrattle() const {
  // @@protoc_insertion_point(field_get:CardInfo.deathrattle)
  return deathrattle_;
}
inline void CardInfo::set_deathrattle(bool value) {
  
  deathrattle_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.deathrattle)
}

// optional bool divine_shield = 19;
inline void CardInfo::clear_divine_shield() {
  divine_shield_ = false;
}
inline bool CardInfo::divine_shield() const {
  // @@protoc_insertion_point(field_get:CardInfo.divine_shield)
  return divine_shield_;
}
inline void CardInfo::set_divine_shield(bool value) {
  
  divine_shield_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.divine_shield)
}

// optional bool stealth = 20;
inline void CardInfo::clear_stealth() {
  stealth_ = false;
}
inline bool CardInfo::stealth() const {
  // @@protoc_insertion_point(field_get:CardInfo.stealth)
  return stealth_;
}
inline void CardInfo::set_stealth(bool value) {
  
  stealth_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.stealth)
}

// optional bool choose_one = 21;
inline void CardInfo::clear_choose_one() {
  choose_one_ = false;
}
inline bool CardInfo::choose_one() const {
  // @@protoc_insertion_point(field_get:CardInfo.choose_one)
  return choose_one_;
}
inline void CardInfo::set_choose_one(bool value) {
  
  choose_one_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.choose_one)
}

// optional bool discover = 22;
inline void CardInfo::clear_discover() {
  discover_ = false;
}
inline bool CardInfo::discover() const {
  // @@protoc_insertion_point(field_get:CardInfo.discover)
  return discover_;
}
inline void CardInfo::set_discover(bool value) {
  
  discover_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.discover)
}

// optional bool aura = 23;
inline void CardInfo::clear_aura() {
  aura_ = false;
}
inline bool CardInfo::aura() const {
  // @@protoc_insertion_point(field_get:CardInfo.aura)
  return aura_;
}
inline void CardInfo::set_aura(bool value) {
  
  aura_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.aura)
}

// optional bool elite = 24;
inline void CardInfo::clear_elite() {
  elite_ = false;
}
inline bool CardInfo::elite() const {
  // @@protoc_insertion_point(field_get:CardInfo.elite)
  return elite_;
}
inline void CardInfo::set_elite(bool value) {
  
  elite_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.elite)
}

// optional bool taunt = 25;
inline void CardInfo::clear_taunt() {
  taunt_ = false;
}
inline bool CardInfo::taunt() const {
  // @@protoc_insertion_point(field_get:CardInfo.taunt)
  return taunt_;
}
inline void CardInfo::set_taunt(bool value) {
  
  taunt_ = value;
  // @@protoc_insertion_point(field_set:CardInfo.taunt)
}

inline const CardInfo* CardInfo::internal_default_instance() {
  return &CardInfo_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_card_5finfo_2eproto__INCLUDED
